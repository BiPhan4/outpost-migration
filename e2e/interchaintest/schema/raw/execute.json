{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "description": "The messages to execute the ICA controller contract.",
  "oneOf": [
    {
      "description": "CreateChannel makes the contract submit a stargate MsgChannelOpenInit to the chain. This is a wrapper around [`options::ChannelOpenInitOptions`] and thus requires the same fields.",
      "type": "object",
      "required": [
        "create_channel"
      ],
      "properties": {
        "create_channel": {
          "$ref": "#/definitions/ChannelOpenInitOptions"
        }
      },
      "additionalProperties": false
    },
    {
      "description": "SendCustomIcaMessages sends custom messages from the ICA controller to the ICA host.",
      "type": "object",
      "required": [
        "send_custom_ica_messages"
      ],
      "properties": {
        "send_custom_ica_messages": {
          "type": "object",
          "required": [
            "messages"
          ],
          "properties": {
            "messages": {
              "description": "Base64-encoded json or proto messages to send to the ICA host.\n\n# Example JSON Message:\n\nThis is a legacy text governance proposal message serialized using proto3json.\n\n```json { \"messages\": [ { \"@type\": \"/cosmos.gov.v1beta1.MsgSubmitProposal\", \"content\": { \"@type\": \"/cosmos.gov.v1beta1.TextProposal\", \"title\": \"IBC Gov Proposal\", \"description\": \"tokens for all!\" }, \"initial_deposit\": [{ \"denom\": \"stake\", \"amount\": \"5000\" }], \"proposer\": \"cosmos1k4epd6js8aa7fk4e5l7u6dwttxfarwu6yald9hlyckngv59syuyqnlqvk8\" } ] } ```\n\nwhere proposer is the ICA controller's address.",
              "allOf": [
                {
                  "$ref": "#/definitions/Binary"
                }
              ]
            },
            "packet_memo": {
              "description": "Optional memo to include in the ibc packet.",
              "type": [
                "string",
                "null"
              ]
            },
            "timeout_seconds": {
              "description": "Optional timeout in seconds to include with the ibc packet. If not specified, the [default timeout](crate::ibc_module::types::packet::DEFAULT_TIMEOUT_SECONDS) is used.",
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "SendPredefinedAction sends a predefined action from the ICA controller to the ICA host. This demonstration is useful for contracts that have predefined actions such as DAOs.\n\nIn this example, the predefined action is a `MsgSend` message which sends 100 \"stake\" tokens.",
      "type": "object",
      "required": [
        "send_predefined_action"
      ],
      "properties": {
        "send_predefined_action": {
          "type": "object",
          "required": [
            "to_address"
          ],
          "properties": {
            "to_address": {
              "description": "The recipient's address, on the counterparty chain, to send the tokens to from ICA host.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "sending tokens with the protobuf encoding scheme",
      "type": "object",
      "required": [
        "send_coins_proto"
      ],
      "properties": {
        "send_coins_proto": {
          "type": "object",
          "required": [
            "recipient_address"
          ],
          "properties": {
            "recipient_address": {
              "description": "The recipient's address, on the counterparty chain, to send the tokens to from ICA host.",
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Binary": {
      "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
      "type": "string"
    },
    "ChannelOpenInitOptions": {
      "description": "The message used to provide the MsgChannelOpenInit with the required data.",
      "type": "object",
      "required": [
        "connection_id",
        "counterparty_connection_id"
      ],
      "properties": {
        "connection_id": {
          "description": "The connection id on this chain.",
          "type": "string"
        },
        "counterparty_connection_id": {
          "description": "The counterparty connection id on the counterparty chain.",
          "type": "string"
        },
        "counterparty_port_id": {
          "description": "The counterparty port id. If not specified, [crate::ibc::types::keys::HOST_PORT_ID] is used. Currently, this contract only supports the host port.",
          "type": [
            "string",
            "null"
          ]
        },
        "tx_encoding": {
          "description": "TxEncoding is the encoding used for the ICA txs. If not specified, [TxEncoding::Protobuf] is used.",
          "anyOf": [
            {
              "$ref": "#/definitions/TxEncoding"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "TxEncoding": {
      "description": "Encoding is the encoding of the transactions sent to the ICA host.",
      "oneOf": [
        {
          "description": "Protobuf is the protobuf serialization of the CosmosSDK's Any.",
          "type": "string",
          "enum": [
            "proto3"
          ]
        },
        {
          "description": "Proto3Json is the json serialization of the CosmosSDK's Any.",
          "type": "string",
          "enum": [
            "proto3json"
          ]
        }
      ]
    }
  }
}
